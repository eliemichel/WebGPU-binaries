function(__extract_target_aux Target AVAILABLE_LIBRARIES OUT_SOURCES OUT_INCLUDES OUT_LINK_LIBRARIES OUT_COMPILE_DEFINITIONS)
	message(STATUS "__extract_target_aux(Target=${Target})")

	# Get sources
	get_target_property(SOURCES ${Target} SOURCES)
	get_target_property(INTERFACE_SOURCES ${Target} INTERFACE_SOURCES)
	set(ALL_SOURCES "")
	if (SOURCES)
		list(APPEND ALL_SOURCES ${SOURCES})
	endif()
	if (INTERFACE_SOURCES)
		list(APPEND ALL_SOURCES ${INTERFACE_SOURCES})
	endif()
	set(SOURCES "${ALL_SOURCES}")

	# Get include directories
	get_target_property(INCLUDE_DIRECTORIES ${Target} INCLUDE_DIRECTORIES)
	get_target_property(INTERFACE_INCLUDE_DIRECTORIES ${Target} INTERFACE_INCLUDE_DIRECTORIES)
	set(INCLUDES "")
	if (INCLUDE_DIRECTORIES)
		list(APPEND INCLUDES ${INCLUDE_DIRECTORIES})
	endif()
	if (INTERFACE_INCLUDE_DIRECTORIES)
		list(APPEND INCLUDES ${INTERFACE_INCLUDE_DIRECTORIES})
	endif()

	# Clean up source paths
	get_target_property(SOURCE_DIR ${Target} SOURCE_DIR)
	set(ABSOLUTE_SOURCES "")
	foreach (file ${SOURCES})
		cmake_path(ABSOLUTE_PATH file BASE_DIRECTORY "${SOURCE_DIR}" NORMALIZE)
		list(APPEND ABSOLUTE_SOURCES "${file}")
	endforeach()
	set(SOURCES "${ABSOLUTE_SOURCES}")

	# Get linked libraries
	get_target_property(LINK_LIBRARIES ${Target} LINK_LIBRARIES)
	message(STATUS "${Target} LINK_LIBRARIES = ${LINK_LIBRARIES}")
	if (NOT LINK_LIBRARIES)
		set(LINK_LIBRARIES "")
	endif()

	# Recurse for the libraries that are not listed as already available
	set(AVAILABLE_LINK_LIBRARIES "")
	foreach (Lib ${LINK_LIBRARIES})
		if (NOT TARGET ${Lib})
			message(STATUS "Skipping non target ${Lib}")
		elseif (${Lib} IN_LIST AVAILABLE_LIBRARIES)
			list(APPEND AVAILABLE_LINK_LIBRARIES ${Lib})
		else()
			__extract_target_aux(${Lib} "${AVAILABLE_LIBRARIES}" LIB_SOURCES LIB_INCLUDES LIB_LINK_LIBRARIES LIB_COMPILE_DEFINITIONS)
			if (LIB_SOURCES)
				list(APPEND SOURCES ${LIB_SOURCES})
			endif()
			if (LIB_LINK_LIBRARIES)
				list(APPEND LINK_LIBRARIES ${LIB_LINK_LIBRARIES})
			endif()
			if (LIB_INCLUDES)
				list(APPEND INCLUDES ${LIB_INCLUDES})
			endif()
			if (LIB_COMPILE_DEFINITIONS)
				list(APPEND COMPILE_DEFINITIONS ${LIB_COMPILE_DEFINITIONS})
			endif()
		endif()
	endforeach()

	# Get compile deftinitions
	get_target_property(COMPILE_DEFINITIONS ${Target} COMPILE_DEFINITIONS)
	if (NOT COMPILE_DEFINITIONS)
		set(COMPILE_DEFINITIONS "")
	endif()

	set(${OUT_SOURCES} "${SOURCES}" PARENT_SCOPE)
	set(${OUT_INCLUDES} "${INCLUDES}" PARENT_SCOPE)
	set(${OUT_LINK_LIBRARIES} "${AVAILABLE_LINK_LIBRARIES}" PARENT_SCOPE)
	set(${OUT_COMPILE_DEFINITIONS} "${COMPILE_DEFINITIONS}" PARENT_SCOPE)
endfunction()

function(extract_dawn_target Target OUT_DIR AVAILABLE_LIBRARIES)
	__extract_target_aux(${Target} "${AVAILABLE_LIBRARIES}" ALL_SOURCES ALL_INCLUDES ALL_LINK_LIBRARIES ALL_COMPILE_DEFINITIONS)

	if (NOT ALL_SOURCES)
		set(ALL_SOURCES "")
	endif()
	if (NOT ALL_INCLUDES)
		set(ALL_INCLUDES "")
	endif()
	if (NOT ALL_LINK_LIBRARIES)
		set(ALL_LINK_LIBRARIES "")
	endif()
	if (NOT ALL_COMPILE_DEFINITIONS)
		set(ALL_COMPILE_DEFINITIONS "")
	endif()

	list(REMOVE_DUPLICATES ALL_SOURCES)
	list(REMOVE_DUPLICATES ALL_INCLUDES)
	list(REMOVE_DUPLICATES ALL_LINK_LIBRARIES)
	list(REMOVE_DUPLICATES ALL_COMPILE_DEFINITIONS)
	#message(STATUS "ALL_SOURCES = ${ALL_SOURCES}")
	#message(STATUS "ALL_INCLUDES = ${ALL_INCLUDES}")
	message(STATUS "ALL_LINK_LIBRARIES = ${ALL_LINK_LIBRARIES}")
	message(STATUS "ALL_COMPILE_DEFINITIONS = ${ALL_COMPILE_DEFINITIONS}")

	set(DAWN_SRC_ROOT "${Dawn_SOURCE_DIR}")
	set(DAWN_GEN_ROOT "${Dawn_BINARY_DIR}/gen")
	set(CMAKELIST_SRC)
	foreach (file ${ALL_SOURCES})
		file(TO_CMAKE_PATH ${file} file)
		set(pattern "^${DAWN_SRC_ROOT}/(.*)$")
		string(REGEX MATCH "${pattern}" IS_SRC ${file})
		if (IS_SRC)
			string(REGEX REPLACE "${pattern}" "\\1" AS_SRC ${file})
			copy_file("${file}" "${OUT_DIR}/${AS_SRC}")
			list(APPEND CMAKELIST_SRC "${AS_SRC}")
		endif()

		set(pattern "^${DAWN_GEN_ROOT}/(.*)$")
		string(REGEX MATCH "${pattern}" IS_GEN ${file})
		if (IS_GEN)
			string(REGEX REPLACE "${pattern}" "\\1" AS_GEN ${file})
			copy_file("${file}" "${OUT_DIR}/gen/${AS_GEN}")
			list(APPEND CMAKELIST_SRC "gen/${AS_GEN}")
		endif()
	endforeach()

	message(STATUS "ALL_SOURCES =")
	foreach (file ${CMAKELIST_SRC})
		message(STATUS "    ${file}")
	endforeach()

	# Remove generator expressions like $<BUILD_INTERFACE:Foo>
	set(CLEANED_INCLUDES)
	foreach(path ${ALL_INCLUDES})
		string(REGEX REPLACE "^\\\$<BUILD_INTERFACE:(.*)>$" "\\1" path "${path}")
		list(APPEND CLEANED_INCLUDES "${path}")
	endforeach()
	set(ALL_INCLUDES "${CLEANED_INCLUDES}")

	# For some reason these ones are missed
	list(APPEND ALL_INCLUDES "${DAWN_GEN_ROOT}/src")
	list(APPEND ALL_COMPILE_DEFINITIONS NOMINMAX DAWN_ENABLE_BACKEND_VULKAN)


	set(CONTENT "add_library(${Target}\n")
	foreach (file ${CMAKELIST_SRC})
		set(CONTENT "${CONTENT}  ${file}\n")
	endforeach()
	set(CONTENT "${CONTENT})\n\n")
	set(CONTENT "${CONTENT}target_include_directories(\n")
	set(CONTENT "${CONTENT}  ${Target}\n")
	set(CONTENT "${CONTENT}  PUBLIC\n")
	set(CONTENT "${CONTENT}    ${DAWN_SRC_ROOT}/src\n")
	set(CONTENT "${CONTENT}    ${DAWN_SRC_ROOT}/include\n")
	set(CONTENT "${CONTENT}    ${DAWN_GEN_ROOT}/include\n")
	foreach (dir ${ALL_INCLUDES})
		set(CONTENT "${CONTENT}    ${dir}\n")
	endforeach()
	set(CONTENT "${CONTENT})\n\n")
	if (ALL_LINK_LIBRARIES)
		set(CONTENT "${CONTENT}target_link_libraries(\n")
		set(CONTENT "${CONTENT}  ${Target}\n")
		set(CONTENT "${CONTENT}  PUBLIC\n")
		foreach (dir ${ALL_LINK_LIBRARIES})
			set(CONTENT "${CONTENT}    ${dir}\n")
		endforeach()
		set(CONTENT "${CONTENT})\n\n")
	endif()
	if (ALL_COMPILE_DEFINITIONS)
		set(CONTENT "${CONTENT}target_compile_definitions(\n")
		set(CONTENT "${CONTENT}  ${Target}\n")
		set(CONTENT "${CONTENT}  PUBLIC\n")
		foreach (dir ${ALL_COMPILE_DEFINITIONS})
			set(CONTENT "${CONTENT}    ${dir}\n")
		endforeach()
		set(CONTENT "${CONTENT})\n\n")
	endif()
	file(WRITE "${OUT_DIR}/CMakeLists.txt" "${CONTENT}")
endfunction()
